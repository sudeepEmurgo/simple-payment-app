Title: Creating Your Chaincode in Detailed steps

# Create your chaincode directory and move into it

# Execute the command to init a new go module
$ go mod init simple-payment-application-chaincode

# We are going to use the contractapi for golang
$ go get -u github.com/hyperledger/fabric-contract-api-go

# Create a new folder for the smart contracts called ‘contracts’

package contracts

import (
    "errors"
    "fmt"

    "github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// SimpleContract contract for handling writing and reading from the world state
type SimplePaymentContract struct {
    contractapi.Contract
}

type Account struct {
	// Your asset definition goes here
}

// InitLedger : Init the ledger
func (spc *SimplePaymentContract) InitLedger(ctx contractapi.TransactionContextInterface) error {
	// Your initialization goes here
	return nil
}

// RegisterUserAccountAccount : User registers his account
func (spc *SimplePaymentContract) RegisterUserAccountAccount(ctx contractapi.TransactionContextInterface, name string, bank string) (*Account, error) {
	// Your register logic goes here
	return nil, nil
}

// Balance : to check the senders balance
func (spc *SimplePaymentContract) Balance(ctx contractapi.TransactionContextInterface) (int64, error) {
	// Your balance logic goes here
	return 0, nil
}

// Transfer : to transfer amount and update balances
func (spc *SimplePaymentContract) Transfer(ctx contractapi.TransactionContextInterface, beneficiary string, amount int64) (string, error) {
	// Your transfer logic goes here
	return nil, nil
}

# chaincode module

package main

import (
	"simple-payment-application-chaincode/contracts"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

func main() {
	simplePaymentContract := new(contracts.SimplePaymentContract)

	cc, err := contractapi.NewChaincode(simplePaymentContract)

	if err != nil {
		panic(err.Error())
	}

	if err := cc.Start(); err != nil {
		panic(err.Error())
	}
}

go mod tidy

go mod vendor

go build

# Go to the test-network folder
	cd <path>

# Bring the Network Down
	./network.sh down

# Bring the network Up
	./network.sh up

# Check docker containers
	docker ps -a

# Create the channel
	./network.sh createChannel

# Make sure you have done the relavant changes to deployCC.sh script to pick your chaincode

# Deploy Chaincode
	./network.sh deployCC -ccn spa

# Prepare to use command line arguments
	export PATH=${PWD}/../bin:$PATH
	export FABRIC_CFG_PATH=$PWD/../config/

# Set the context for Org1
	source ./scripts/setChannelContext.sh 1

# Initialize the chaincode
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n spa --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"InitLedger","Args":[]}'
	
# Register the Users
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n spa --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"RegisterUserAccount","Args":["Calvin","DreamLand"]}'	

# Query the Balance after initialize
	peer chaincode query -C mychannel -n spa -c '{"Args":["Balance"]}'
	
# Switch the context for Org2
	source ./scripts/setChannelContext.sh 2

# Register the Users
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n spa --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"RegisterUserAccount","Args":["Hobbes","ToyLand"]}'	

# Query the Balance after initialize
	peer chaincode query -C mychannel -n spa -c '{"Args":["Balance"]}'

# Peer invoke the transfer function
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n spa --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"Transfer","Args":["<User1>", "50"]}'

# Get Account Statement
	peer chaincode query -C mychannel -n spa -c '{"Args":["GetAccountStatement"]}'

# Do as many experiments as you want

# Bring Down the Network, when you are done playing around
	./network.sh down
